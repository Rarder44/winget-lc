per ignorare il problema 0x8a15005e : The server certificate did not match any of the expected values
	winget settings --enable BypassCertificatePinningForMicrosoftStore.


https://stackoverflow.com/questions/61916158/structure-of-winget-source-repositories
https://stackoverflow.com/questions/19958829/where-can-i-find-makecert-exe-visual-studio-ultimate-2012
https://learn.microsoft.com/en-us/windows/win32/appxpkg/how-to-create-a-package-signing-certificate



C:\Program Files (x86)\Windows Kits\...\bin\x64


Generare un certificato

	.\MakeCert -n "CN=Contoso Software, O=Contoso Corporation, C=US" -r -h 0 -eku "1.3.6.1.5.5.7.3.3,1.3.6.1.4.1.311.10.3.13" -e "01/01/2050" -sv D:\Temp\MyKey.pvk D:\Temp\MyKey.cer
	.\Pvk2Pfx -pvk D:\Temp\MyKey.pvk -pi test -spc D:\Temp\MyKey.cer -pfx D:\Temp\MyKey.pfx
	Certutil -addStore TrustedPeople D:\Temp\MyKey.cer

	#Certutil -store TrustedPeople
	#con il comando sopra prendo l'id del certificato ( tipo questo qua sotto ) 
	#bfdb42ea40c755b74db2ae413fb31f79 seriale per cancellare con ->

	Certutil -delStore TrustedPeople bfdb42ea40c755b74db2ae413fb31f79


ALTRO MODO ( POWERSHELL NUOVO! ) 

	$cert = New-SelfSignedCertificate -Type Custom -KeySpec Signature -Subject "CN=Contoso Software, O=Contoso Corporation, C=US" -KeyExportPolicy Exportable -CertStoreLocation "Cert:\CurrentUser\My" -KeyUsageProperty Sign  -NotAfter (Get-Date).AddYears(5) -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3,1.3.6.1.4.1.311.10.3.13")
	Export-Certificate -Cert $cert -FilePath user.cer
	$CertPassword = ConvertTo-SecureString -String "test" -Force –AsPlainText
	Export-PfxCertificate -Cert $cert -FilePath user.pfx -Password $CertPassword


	( forse devo cmq registrarlo con certutil? ) 


#http://timestamp.digicert.com




uso msix pack... tool
edit il pacchetto base
ci metto il nuovo db modificato
salvo le modifiche firmando il pacchetto
pubblico il pacchetto con nome "source.msix" nella cartella


https://cdn.winget.microsoft.com/cache/source.msix
https://cdn.winget.microsoft.com/cache/manifests/n/Notepad++/Notepad++/8.5.3/96f2-Notepad++.Notepad++.yaml


https://lpozzi.it/winget/manifests/n/Notepad++/Notepad++/8.5.3/96f2-Notepad++.Notepad++.yaml


http://timestamp.digicert.com


winget show MyNotepad++.Notepad++
Si è verificato un errore imprevisto durante l'esecuzione del comando:
0x8a15003f : The source data is corrupted or tampered


winget source add -n test https://lpozzi.it/winget/




TODO: mi ricordo di disistallare questi pacchetti!! ( e di rimuovere il source test )
 winget list --name winget


apertura connessione ssh :
	ssh -l master 192.168.100.128

installare programma
	winget install Putty.Putty -v 0.74.0.0 --scope machine


risoluzione problema admin
	usare la 1.5.441-preview
	
	
per firmare C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\signtool 
	set PATH=%PATH%;C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64
	SignTool sign /fd SHA256  /a /f D:\Temp\winget\MyKey.pfx /p test D:\Temp\winget\source.msix
	
	./zip64.py test.zip Assets Public AppxManifest.xml
	set PATH=%PATH%;C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64
	SignTool sign /fd SHA256  /a /f D:\Temp\winget\MyKey.pfx /p test test.msix
	
	
	signtool.exe sign /fd SHA256 /a /f D:\Temp\winget\MyKey.pfx /p test Public.zip
	
	
	
	
COMANDI MAGICI!!!
creo un pacchetto partendo dai dati nella cartella "source2" e creo un file msix 
	MakeAppx esclude in automatico i file xml che vengono rigenerati e prende in automatico AppxManifest.xml
	ATTENZIONE l'appmanifest "source" originale sembra che ha un errore: manca un file PNG... 
	basta o creare il file o modificare l'xml in modo che punti ad un file esistente
	oppure ( come fatto ) basta mettere il tag /nv  e se ne frega degli errori 
	
	signtool va a firmare con la chiave pfx (generata come sopra )
	usa "MyKey.pfx" con password "test" e firma "test.msix"
	ATTENZIONE: in base al file pfx occorre nel appmanifest ( prima di fare il sign, quindi prima del MakeApp assicurarsi che l'identity ( tra i primi tag ) 
	corrispondano con i dati del certificato!!! ( soprattutto il Publisher ) 
	<Identity Name="Microsoft.Winget.Source2" ProcessorArchitecture="neutral" Publisher="CN=Contoso Software, O=Contoso Corporation, C=US" Version="2023.609.1322.0" />
  

		MakeAppx pack /d source2 /p test.msix /nv 
		signtool sign /fd SHA256 /a /f D:\Temp\winget\MyKey.pfx /p test test.msix
		
		
	
query x modifica /lettura del blob
SELECT HEX(hash) FROM manifest where pathpart= 63476
UPDATE manifest SET hash = x'7c153ca5c38a8b8dc8c311fbddc70e6eab412fae03570376fdc9f6c95241b0ce' where pathpart= 63476



preparazione:
	- creare la firma
	- installare la firma come valida

ad ogni aggiornamento
	- scaricare il file source.msix
	- patchare i problemi di appManifest.xml ???
	- modificare l'appManifest xml in modo che  "Identity" corrisponda alla firma
	- modificare il db e mantenere i programmi che mi servono
	- scaricare i file yaml di tutti i programmi che mi servono 
	- scarico le risorse in locale
	- modificare i file yaml puntando alle risorse in locale
	- faccio l'hash SHA256 di ogni file yaml e li metto nel DB ( manifest -> hash  ) 
	- creo il pacchetto msix
	- firmo il pacchetto
	- deploy del pacchetto / yaml / installazioni su server
	
	
	
	
MakeAppx pack /d source2 /p test.msix /nv 
signtool sign /fd SHA256 /a /f D:\source\repos\winget-lc\certificate\MyCert.pfx /p cerPassSecret sourceNew.msix












Query per pulire il db 

DELETE from ids where ids.id not in ('Notepad++.Notepad++', 'Microsoft.VisualStudioCode')
DELETE from manifest where id not in (SELECT rowid from ids) 
DELETE from names where rowid not in (SELECT DISTINCT name from manifest) 
DELETE from monikers where rowid not in (SELECT DISTINCT moniker from manifest) 
DELETE from versions where rowid not in (SELECT DISTINCT version from manifest) 
DELETE from commands_map where manifest not in (SELECT DISTINCT rowid from manifest) 
DELETE from commands where rowid not in (SELECT DISTINCT command from commands_map)
DELETE from norm_names_map where manifest not in (SELECT DISTINCT rowid from manifest) 
DELETE from norm_names where rowid not in (SELECT DISTINCT norm_name from norm_names_map)
DELETE from norm_publishers_map where manifest not in (SELECT DISTINCT rowid from manifest) 
DELETE from norm_publishers where rowid not in (SELECT DISTINCT norm_publisher from norm_publishers_map)
DELETE from pfns_map where manifest not in (SELECT DISTINCT rowid from manifest) 
DELETE from pfns where rowid not in (SELECT DISTINCT pfn from pfns_map)
DELETE from productcodes_map where manifest not in (SELECT DISTINCT rowid from manifest) 
DELETE from productcodes where rowid not in (SELECT DISTINCT productcode from productcodes_map)
DELETE from tags_map where manifest not in (SELECT DISTINCT rowid from manifest) 
DELETE from tags where rowid not in (SELECT DISTINCT tag from tags_map)
DELETE from upgradecodes_map where manifest not in (SELECT DISTINCT rowid from manifest) 
DELETE from upgradecodes where rowid not in (SELECT DISTINCT upgradecode from upgradecodes_map)



#per cancellare i pathpart ricorsivi
#in breve la prima parte prima di UNION ALL viene eseguita una volta sola e prende l'ultimo pathpart ( quello dal manifest ) 
#nella seconda parte continuo a collegare i pathpart presi in precedenza con altri, finchè ci sono parent 
#sotto cancello le rowid non nella selezione


	WITH RECURSIVE all_tree_pathparts (rowid,parent) AS (
		SELECT p1.rowid,p1.parent
		FROM pathparts p1
		WHERE p1.rowid in (SELECT pathpart from manifest ) 

		UNION ALL

		SELECT  p.rowid,p.parent
		FROM pathparts p
		JOIN all_tree_pathparts c ON p.rowid = c.parent
	)

	delete from pathparts where rowid not in ( SELECT DISTINCT rowid FROM all_tree_pathparts)




#stessa query aggiornata ma adesso la parte ricorsiva è unica sia per la cancellazione che per selezione
#with recursive va comunque ripetuto prima della select / delete!!

	WITH RECURSIVE all_tree_pathparts (parent,path,rowidLastElement) AS (
		SELECT p1.parent,p1.pathpart,p1.rowid 
		FROM pathparts p1
		WHERE p1.rowid in (SELECT pathpart from manifest ) 

		UNION ALL

		SELECT  p.parent,p.pathpart || '\' || c.path, c.rowidLastElement
		FROM pathparts p
		JOIN all_tree_pathparts c ON p.rowid = c.parent
	)
	delete from pathparts where rowid not in ( SELECT DISTINCT parent FROM all_tree_pathparts);


	SELECT * FROM all_tree_pathparts where parent is NULL
	
	
	
	
#recupera l'ultima versione per ogni programama
Select * from (SELECT * from manifest GROUP BY id having version = max(version)) as t INNER JOIN versions on ( versions.rowid = t.version ) 

#recupera i pathpart degli yaml da scaricare ( ultima versione ) -> unione delle 2 query precedenti

	WITH RECURSIVE all_tree_pathparts (parent,path,rowidLastElement) AS (
		SELECT p1.parent,p1.pathpart,p1.rowid 
		FROM pathparts p1
		WHERE p1.rowid in (SELECT pathpart from (SELECT * from manifest GROUP BY id having version = max(version)) as t INNER JOIN versions on ( versions.rowid = t.version ) ) 

		UNION ALL

		SELECT  p.parent,p.pathpart || '\' || c.path, c.rowidLastElement
		FROM pathparts p
		JOIN all_tree_pathparts c ON p.rowid = c.parent
	)

	SELECT * FROM all_tree_pathparts where parent is NULL
	
	




#riordina gli id del manifest

	create temp table Tmp(NewID, OldID);
	insert into Tmp Select ROW_NUMBER () OVER (ORDER BY rowid) RowNum, rowid from manifest;
	select * from Tmp;
	UPDATE manifest SET rowid = (SELECT NewID FROM Tmp WHERE Tmp.OldID = manifest.rowid );
	UPDATE commands_map SET manifest = (SELECT NewID FROM Tmp WHERE Tmp.OldID = commands_map.manifest );                        
	UPDATE norm_names_map SET manifest = (SELECT NewID FROM Tmp WHERE Tmp.OldID = norm_names_map.manifest );   
	UPDATE norm_publishers_map SET manifest = (SELECT NewID FROM Tmp WHERE Tmp.OldID = norm_publishers_map.manifest );  						 
	UPDATE productcodes_map SET manifest = (SELECT NewID FROM Tmp WHERE Tmp.OldID = productcodes_map.manifest ); 					 
	UPDATE upgradecodes_map SET manifest = (SELECT NewID FROM Tmp WHERE Tmp.OldID = upgradecodes_map.manifest ); 		
	UPDATE tags_map SET manifest = (SELECT NewID FROM Tmp WHERE Tmp.OldID = tags_map.manifest ); 		
	UPDATE pfns_map SET manifest = (SELECT NewID FROM Tmp WHERE Tmp.OldID = pfns_map.manifest ); 			
	DROP TABLE Tmp;